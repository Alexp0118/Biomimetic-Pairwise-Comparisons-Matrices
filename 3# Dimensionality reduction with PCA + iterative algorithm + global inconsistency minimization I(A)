import numpy as np  
from sklearn.decomposition import PCA  
from sklearn.cluster import KMeans  

# Original 5x5 matrix  
A_original = np.array([  
    [1, 3, 5, 2.062, 1/7],  
    [1/3, 1, 4, 6, 1.77],  
    [1/5, 1/4, 1, 2, 1/9],  
    [1/2.062, 1/6, 1/2, 1, 1/3],  
    [7, 1/1.77, 9, 3, 1]  
])  

# Step 1: Symmetrize and reduce to 3x3 via PCA  
A_symmetric = (A_original + A_original.T) / 2  
pca = PCA(n_components=3)  
transformed = pca.fit_transform(A_symmetric)  

# Step 2: Cluster elements into 3 groups  
kmeans = KMeans(n_clusters=3, random_state=42)  
clusters = kmeans.fit_predict(transformed)  

# Step 3: Build reduced matrix using geometric mean  
K = 3  
A_reduced = np.ones((K, K))  

for i in range(K):  
    for j in range(i+1, K):  
        elements = []  
        for idx_i in np.where(clusters == i)[0]:  
            for idx_j in np.where(clusters == j)[0]:  
                elements.append(A_original[idx_i, idx_j])  
        if elements:  
            geometric_mean = np.prod(elements) ** (1/len(elements))  
            A_reduced[i, j] = geometric_mean  
            A_reduced[j, i] = 1 / geometric_mean  
        else:  
            A_reduced[i, j] = 1  
            A_reduced[j, i] = 1  

print("Reduced 3x3 matrix:\n", np.round(A_reduced, 2))  

# Step 4: Stabilize using the biomimetic algorithm  
def update_matrix(A, eta):  
    A_new = A.copy()  
    N = A.shape[0]  
    for i in range(N):  
        for j in range(i+1, N):  
            sum_term = 0  
            for k in range(N):  
                if k != i and k != j:  
                    sum_term += (A[i,k] * A[k,j]) / A[i,j]  
            delta = eta * (sum_term / (N-2) - A[i,j])  
            A_new[i,j] += delta  
            A_new[j,i] = 1 / A_new[i,j]  
    return A_new  

def matrix_difference(A, A_new):  
    return np.max(np.abs(A - A_new))  

eta = 0.1  
zeta = 0.03  
max_iterations = 4 

A_current = A_reduced.copy()  
iteration = 0  

while iteration < max_iterations:  
    A_new = update_matrix(A_current, eta)  
    diff = matrix_difference(A_current, A_new)  
    if diff < zeta:  
        print(f"Converged in {iteration+1} iterations.")  
        break  
    A_current = A_new  
    iteration += 1  
else:  
    print(f"Max iterations ({max_iterations}) reached.")  

# Calculate final inconsistency for 3x3 matrix (single triad)  
def calculate_I(A):  
    a = A[0,1]  
    b = A[1,2]  
    c = A[0,2]  
    kij = abs(1 - (a*b)/c)  
    kji = abs(1 - c/(a*b))  
    return min(kij, kji)  

final_I = calculate_I(A_current)  
print("\nStabilized 3x3 matrix:\n", np.round(A_current, 2))  
print(f"Final inconsistency I(A): {final_I:.4f}") 
